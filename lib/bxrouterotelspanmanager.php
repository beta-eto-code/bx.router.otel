<?php

namespace Bx\Router\Otel;

use Bitrix\Main\Config\Option;
use OpenTelemetry\API\Trace\SpanInterface;
use OpenTelemetry\API\Trace\TracerInterface;
use OpenTelemetry\SDK\Trace\TracerProviderInterface;
use Otel\Base\Abstracts\OTeBaselSpanManager;

class BxRouterOTelSpanManager extends OTeBaselSpanManager
{
    private array $options;

    public function __construct(TracerProviderInterface $tracerProvider, ?iterable $eventIterator = null)
    {
        parent::__construct($tracerProvider, $eventIterator);
        $this->options = self::getOptions();
    }

    private static function getOptions(): array
    {
        $optionsTabs = ConfigList::getOptionsTab();
        $mid = ConfigList::MODULE_NAME;
        $result = [];


        foreach ($optionsTabs as $optionTab) {
            foreach ($optionTab['options'] as $name => $value) {
                if (is_string($value)) {
                    $optionName = $name;
                } else if (is_array($value)) {
                    $optionName = $value['name'] ?? null;
                    if (!$optionName) {
                        continue;
                    }
                } else {
                    continue;
                }

                $optionValue = (string)Option::get($mid, $optionName, $value['default'] ?? "");
                $decodedValue = json_decode($optionValue, true) ?? null;
                if ($decodedValue) {
                    $optionValue = $decodedValue;
                }

                $result[$name] = $optionValue;
            }
        }

        return $result;
    }

    public function __destruct()
    {
        if (!$this->isEnabled()) {
            return;
        }

        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    public function createAndStartSpan($name, $attributes = []): void
    {
        if (!$this->isEnabled()) {
            return;
        }

        parent::createAndStartSpan($name, $attributes); // TODO: Change the autogenerated stub
    }

    public function addSpanEvent(string $spanName, string $eventName, ?array $attributes): void
    {
        if (!$this->isEnabled()) {
            return;
        }
        parent::addSpanEvent($spanName, $eventName, $attributes); // TODO: Change the autogenerated stub
    }

    public function endSpan(): void
    {
        if (!$this->isEnabled()) {
            return;
        }
        parent::endSpan(); // TODO: Change the autogenerated stub
    }

    public function getTracer(): TracerInterface
    {
        return parent::getTracer(); // TODO: Change the autogenerated stub
    }

    public function setTracer(?string $tracerName): void
    {
        if (!$this->isEnabled()) {
            return;
        }

        parent::setTracer($tracerName); // TODO: Change the autogenerated stub
    }

    public function startRootSpan(?array $attributes = []): void
    {
        if (!$this->isEnabled()) {
            return;
        }
        parent::startRootSpan($attributes); // TODO: Change the autogenerated stub
    }

    public function getSpan(): ?SpanInterface
    {
        if (!$this->isEnabled()) {
            return null;
        }
        return parent::getSpan(); // TODO: Change the autogenerated stub
    }

    public function getEventListener(): ?iterable
    {
        if (!$this->isEnabled()) {
            return [];
        }

        return parent::getEventListener(); // TODO: Change the autogenerated stub
    }

    public function getSpansNames(): array
    {
        if (!$this->isEnabled()) {
            return [];
        }

        return parent::getSpansNames(); // TODO: Change the autogenerated stub
    }

    private function isEnabled(): bool
    {
        return ($this->options[ ConfigList::USE_OTEL ] == 'Y');
    }
}
